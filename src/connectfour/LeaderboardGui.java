/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package connectfour;
import java.io.*; // Used to read and write text files
import java.util.ArrayList; // Used in reading and sorting files
/**
 * Program that creates and runs the leaderboardGUI
 * @author Colin Chambachan
 * date: August 24th, 2020
 */
public class LeaderboardGui extends javax.swing.JFrame {
    // Create a MainScreen object which will be used to carry on the next object
    MainScreen mainScreen;
    
    /**
     * Creates new form LeaderboardGui
     */
    public LeaderboardGui(MainScreen mainScreenGui) {
        
        initComponents();
        // Make the gui not visible by default, that way it only because visble when the button on the main game is clicked
        setVisible(false);
        // Assign the passed parameter of the GUI to its continuation (mainScreen)
        mainScreen = mainScreenGui;
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grpSortOrder = new javax.swing.ButtonGroup();
        btnUnsorted = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        lblOutput = new javax.swing.JLabel();
        btnExit = new javax.swing.JButton();
        scrOutput = new javax.swing.JScrollPane();
        txtOutput = new javax.swing.JTextArea();
        btnFindHighest = new javax.swing.JButton();
        btnAscending = new javax.swing.JRadioButton();
        btnDescending = new javax.swing.JRadioButton();
        btnSort = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnUnsorted.setText("Output Unsorted");
        btnUnsorted.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUnsortedActionPerformed(evt);
            }
        });

        lblTitle.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        lblTitle.setText("Connect Four Win Totals!");

        lblOutput.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblOutput.setText("Output");

        btnExit.setText("Exit Leaderboard");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        txtOutput.setColumns(20);
        txtOutput.setRows(5);
        scrOutput.setViewportView(txtOutput);

        btnFindHighest.setText("Find Highest");
        btnFindHighest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindHighestActionPerformed(evt);
            }
        });

        grpSortOrder.add(btnAscending);
        btnAscending.setText("Ascending");

        grpSortOrder.add(btnDescending);
        btnDescending.setText("Descending");

        btnSort.setText("Sort");
        btnSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSortActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblOutput)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(scrOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnUnsorted, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(20, 20, 20))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnFindHighest)
                                    .addComponent(btnAscending)
                                    .addComponent(btnDescending)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(21, 21, 21)
                                        .addComponent(btnSort)))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnExit)
                                .addGap(0, 0, Short.MAX_VALUE))))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblTitle)
                .addGap(143, 143, 143))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(119, 119, 119)
                .addComponent(btnUnsorted)
                .addGap(18, 18, 18)
                .addComponent(btnFindHighest)
                .addGap(31, 31, 31)
                .addComponent(btnAscending)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDescending)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSort)
                .addGap(38, 38, 38)
                .addComponent(btnExit)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(lblTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addComponent(lblOutput)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Creates an array of all the information written in the file
     * @return an array of all the information written in the file
     */
    public String[] getArray(){
        // Declare an a global arraylist to collect the information from the text 
        ArrayList<String> strScoresList = new ArrayList<String>();
        // Use a try and catch function to get each line in the file
        try {
           // Create a new file reader and buffered reader 
           FileReader fr = new FileReader("WinTotals.txt");
           BufferedReader br = new BufferedReader(fr); 
           // Create variable that will hold th line in the file
           String strFileLine = br.readLine();
           
           // Add each line to the array list until reaching the end of the file, when it will return null
            while(strFileLine != null){
                strScoresList.add(strFileLine);
                strFileLine = br.readLine();
            }
           // Close the buffered Reader
           br.close();
        } catch (IOException e){}
        
        // Convert the array list into an array and then return it
        String [] strScoresArray = new String[strScoresList.size()];
        strScoresList.toArray(strScoresArray);
        // Return the an array containing all the information fo the file
        return strScoresArray;
    }
    /**
     * Get the highest number of wins from file location using selection sort
     * @return the highest number of wins from file location
     */
    public int highestValue(){
        // Get the list of values first 
       String [] strWinsList = getArray();
       // Declare variable which tracks the highest win score
       int intGreatestWinTotal = 0;
       String strDateOfGreatestWin = "";
       // iterate through every win total in the list to find the highest value
       for (int i = 1; i < strWinsList.length; i +=2){
           // Check to see if the value at the current iteration is greates than the current greatest value
           if (Integer.parseInt(strWinsList[i]) > intGreatestWinTotal){
               intGreatestWinTotal = Integer.parseInt(strWinsList[i]);
               strDateOfGreatestWin = strWinsList[i-1];
            }
       }
       
       //Check to see if the gui and an output is necesary or if it is being grabbed for the main screen game
       if (this.isVisible()){
           // Output the highest win total and the date it was acheived on
           txtOutput.setText("The highest win total is " + intGreatestWinTotal + " and it was achieved on " + strDateOfGreatestWin + "!");
        }
       // Return the greatest win total found in the file
       return intGreatestWinTotal;
       
    }
    
    /**
     * Function that grabs only the dates from the file, and returns them in their own array
     * @param strCompleteList is the list that is being sorted through
     * @return the list of just dates
     */
    public String [] getDates(String[] strCompleteList){
        // Create an array list to temporarily store the dates
        ArrayList<String> strArrayListDates = new ArrayList<>();
        for (int i = 0; i < strCompleteList.length; i+=2){
            // Add each date to the list
            strArrayListDates.add(strCompleteList[i]);
        }
        // Convert the array list into an array and then return it
        String [] strDatesArray = new String[strArrayListDates.size()];
        strArrayListDates.toArray(strDatesArray);
        
        // Return an array contraining just the dates in the text file
        return strDatesArray;
    }
    
    /**
     * Function that grabs only the scores from the file, and returns them in their own array
     * @param strCompleteList is the list that is being sorted through
     * @return the list of just dates
     */
    public Integer [] getScores(String[] strCompleteList){
        // Create an array list to temporarily store the dates
        ArrayList<Integer> intArrayListScores = new ArrayList<>();
        for (int i = 1; i < strCompleteList.length; i+=2){
            // Add each date to the list
            intArrayListScores.add(Integer.parseInt(strCompleteList[i]));
        }
        // Convert the array list into an array and then return it
        Integer [] intScoreArray = new Integer[intArrayListScores.size()];
        intArrayListScores.toArray(intScoreArray);
        
        // Return the scores found in the array
        return intScoreArray;
    }
    /**
     * Function that sorts the scores of the past users, using a selection sort algorthmn
     * @param strCompleteList is the complete list that is being sorted
     * @param isAscending is whether the user wants it sorted in an ascending order
     */
    public void sortScores(String[] strCompleteList, boolean isAscending){
        // Call the getDates and getScores function
        String [] strDates = getDates(strCompleteList);
        Integer [] intScores = getScores(strCompleteList);
        
        // Sort the list in ascending order
        if (isAscending){
            // Use nested for loops to iterate through each value in the list, and compare it to the initial comparison value
            for (int i = 0; i < intScores.length; i++){
                for (int j = i+1; j < intScores.length; j++)
                    // Check to see if the value at intScores[j] is less than the value at intScores[i]
                    if (intScores[j] < intScores[i]){
                        // Swap the values of the two indices for the scores and dates
                        int intTemp = intScores[i];
                        intScores[i] = intScores[j];
                        intScores[j] = intTemp;
                        
                        String strTemp = strDates[i];
                        strDates[i] = strDates[j];
                        strDates[j] = strTemp;
                    }
            }
        }
        // Sort the list in descending order
        else{
            // Use nested for loops to iterate through each value in the list, and compare it to the initial comparison value
            for (int i = 0; i < intScores.length; i++){
                for (int j = i+1; j < intScores.length; j++)
                    // Check to see if the value at intScores[j] is less than the value at intScores[i]
                    if (intScores[j] > intScores[i]){
                        // Swap the values of the two indices for the scores and dates
                        int intTemp = intScores[i];
                        intScores[i] = intScores[j];
                        intScores[j] = intTemp;
                        
                        String strTemp = strDates[i];
                        strDates[i] = strDates[j];
                        strDates[j] = strTemp;
                    }
            }
        }
        
        // Output the values of both, to mimmick a sorted list
        
        // Clear any previous text in the output panel, set ouput depending on order of sort
        if (isAscending){
            txtOutput.setText("The Highest Scores Are (low to high): \n");
        } else {
            txtOutput.setText("The Highest Scores Are (high to low): \n");
        }
        
        for (int i = 0; i < intScores.length; i++){
            txtOutput.setText(txtOutput.getText() + "Date: " + strDates[i] + "\n" +
                   "Score: " + intScores[i] + "\n\n" );
        }
        
    }
    
    
    /**
     * Outputs the unsorted version of the list
     * @param evt when an event occurs
     */
    private void btnUnsortedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUnsortedActionPerformed
        // Clea any pervious text
        txtOutput.setText("");
        // Read each line in the win totals file and output it to the user
        try{
            // Create a new file reader and buffered reader
            FileReader fr = new FileReader("WinTotals.txt");
            BufferedReader br = new BufferedReader(fr);
            String strLine = br.readLine();
            // Check to see which piece of data with counter variable
            int intCounter = 0;
            while(strLine != null){
                if (intCounter % 2 == 0){
                    txtOutput.setText(txtOutput.getText() + "Date: " + strLine + "\n");
                } else if (intCounter % 2 != 0){
                    txtOutput.setText(txtOutput.getText() + "Wins: " + strLine + "\n\n");
                }
                // Get next line and increase counter
                strLine = br.readLine();
                intCounter++;

            }
            // Closer the buffered reader
            br.close();

        }
        catch (IOException e){}
    }//GEN-LAST:event_btnUnsortedActionPerformed
   
    /**
     * Finds highest value in the text file
     * @param evt is when thebuttons is clicked
     */   
    private void btnFindHighestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindHighestActionPerformed
       // Call the highest value function
       highestValue();
       
    }//GEN-LAST:event_btnFindHighestActionPerformed
    /**
     * Sorts the text file and outputs it to the user
     * @param evt is when the button was clicked
     */
    private void btnSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSortActionPerformed
        // get the complete list of all the info in the WinTotals file
        String [] strCompleteList = getArray();
        // Call the function that sorts and outputs the list
        sortScores(strCompleteList, btnAscending.isSelected());
        
    }//GEN-LAST:event_btnSortActionPerformed
    /**
     * Exit the leaderboard
     * @param evt is when the button was clicked
     */
    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // make the main game visible again
        mainScreen.setVisible(true);
        // make the GUI no longer visible
        setVisible(false);
        
    }//GEN-LAST:event_btnExitActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton btnAscending;
    private javax.swing.JRadioButton btnDescending;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnFindHighest;
    private javax.swing.JButton btnSort;
    private javax.swing.JButton btnUnsorted;
    private javax.swing.ButtonGroup grpSortOrder;
    private javax.swing.JLabel lblOutput;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JScrollPane scrOutput;
    private javax.swing.JTextArea txtOutput;
    // End of variables declaration//GEN-END:variables
}
